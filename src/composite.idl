#ifndef SCS_MEBRANE
#define SCS_MEMBRANE

#include "scs.idl"

module scs {
	module composite{

		typedef unsigned long MembershipId;
		typedef sequence<MembershipId> MembershipIds;
		typedef unsigned long BindingId;
		typedef sequence<scs::core::IComponent> IComponentSeq;

		exception ComponentAlreadyExistsInMembrane{};
		exception ComponentIsNotIntoMembrane{};
		exception UnshareableComponent{};
		exception InvalidComponent{};
		exception ComponentNotFound{ MembershipId id; };
		exception FacetNotFound{};
		exception FacetAlreadyExists{};
		exception IncompatibleInterfaces{}; // as interfaces não são compatíveis entre sim. Não é possível criar um conector.
		exception ReceptacleNotFound{};
		exception ReceptacleAlreadyExists{};
		exception ComponentFailure{string msg; }; //erro genérico
		exception UnknownConnectorType{};

		struct BindInformation {
			MembershipId id;
			string name;
		};

		struct MembershipDescription{
			MembershipId id;
			scs::core::IComponent iComponent;
		};
		typedef sequence<MembershipDescription> MembershipDescriptionSeq;


		interface IContentController {

			string getId();
			/**
			* \exception InvalidComponent O componente não possui a faceta ISuperComponent necessária.
			*/
			MembershipId addSubComponent(in scs::core::IComponent obj) raises(InvalidComponent, ComponentFailure, UnshareableComponent);

			boolean removeSubComponent(in MembershipId id); //Vale colocar um bool de retorno? ou exceção

			MembershipDescriptionSeq getSubComponents();

			scs::core::IComponent findComponent(in MembershipId id) raises(ComponentNotFound, ComponentFailure);

			/**
			* \brief Adiciona um ou mais componentes que serão responsáveis por executar uma faceta no componente composto.
			* \remark A faceta criará um conector para simbolizar a faceta do componente composto
			*/	
			BindingId bindConnectorFacet(in MembershipId connector, in string internalFacetName, in string externalFacetName)
					raises(InvalidComponent, FacetNotFound, FacetAlreadyExists, ComponentFailure);

			/**
			* \brief Adiciona uma faceta de um conector já existente que será representará uma faceta do componente composto.
			  \param connectorType O tipo de conector que será utilizado. A interface padrão possui os seguintes tipos:
		  	    replication, consensus e cooperation.
			*/
			BindingId bindFacet(in BindInformation internalFacetList,in string connectorType , in string externalFacetName)
					raises(InvalidComponent, FacetNotFound, FacetAlreadyExists, ComponentFailure, UnknownConnectorType);

			boolean unbindFacet(in BindingId id); //Vale colocar um bool de retorno? ou exceção

			/**
			* \brief Adiciona um ou mais componentes que serão responsáveis por executar uma receptáculo do componente composto.
			* \remark A faceta criará um conector para simbolizar a receptáculo do componente composto.
			*/
			BindingId bindReceptacle(in MembershipIds subcomponent,in string internalReceptacleName,in string externalReceptacleName)
					raises(InvalidComponent, ReceptacleNotFound, ReceptacleAlreadyExists, ComponentFailure, IncompatibleInterfaces);

			void unbindReceptacle(in BindingId id);//Vale colocar um bool de retorno? ou exceção

		}; interface ISuperComponent {

			/**
			 * \exception InvalidComponent O componente não possui a faceta ISuperComponent necessária ou
			 * o método não recebeu a faceta IComponent como parâmetro.
			*/
			void addSuperComponent(in scs::core::IComponent iComponent) raises(InvalidComponent);

			/* Como comparar um ICompoent para conseguir remove-lo? */
			boolean removeSuperComponent(in scs::core::IComponent iComponent);

			IComponentSeq getSuperComponents();
		};
	};
};

#endif

